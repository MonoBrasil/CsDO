using System;
using CsDO.Lib;
using System.CodeDom.Compiler;
using Microsoft.CSharp;
using System.CodeDom;
using System.IO;
using System.Collections.Generic;

namespace CsDO.CodeGenerator
{
    public partial class EntityGenerator
    {
        IDataBase driver = null;

        public EntityGenerator(string namespaceName, IDataBase driver)
        {
            this.namespaceName = namespaceName;
            this.driver = driver;
        }

        public string Run(ClassDefinition table, string path)
        {
            using (CodeDomProvider provider = new CSharpCodeProvider())
            {
                CodeCompileUnit unit = new CodeCompileUnit();

                CodeNamespace codeNamespace = new CodeNamespace(namespaceName);
                codeNamespace.Imports.Add(new CodeNamespaceImport("System"));
                codeNamespace.Imports.Add(new CodeNamespaceImport("CsDO.Lib"));

                #region code comments
                codeNamespace.Comments.AddRange(InsertComments(new string[]
                {
                    "This file was generated automatically by CsDO.CodeGenerator.",
                    "",
                    "DO NOT EDIT THIS FILE !",
                    "",
                    "If you need to extend this class, create another file and use this code:",
                    @"
    public partial class " + table + @"
    {
    }
"
                }));
                #endregion

                unit.Namespaces.Add(codeNamespace);

                CodeTypeDeclaration type = CreateClass(table);
                codeNamespace.Types.Add(type);

                SchemaReader.ReadSchema(driver, table);

                WriteFields(table.Columns, type);
                WriteProperties(table.Columns, type);
                //WriteConstructor(list, type);

                CodeGeneratorOptions options = new CodeGeneratorOptions();
                options.BlankLinesBetweenMembers = true;
                options.BracingStyle = "C";
                options.IndentString = "\t";

                TextWriter writer = new StringWriter();

                string filename = Path.GetFullPath(path) +
                    Path.DirectorySeparatorChar + namespaceName + "." + table + ".cs";
                
                if (File.Exists(filename))
                    File.Delete(filename);

                FileStream fs = new FileStream(filename, FileMode.CreateNew, FileAccess.ReadWrite);
                try
                {
                    provider.GenerateCodeFromCompileUnit(unit, writer, options);
                    string code = writer.ToString();
                    byte[] bytes = new byte[code.Length];
                    for (int i = 0; i < code.Length; i++)
                        bytes[i] = (byte) code[i];

                    fs.Write(bytes, 0, bytes.Length);
                    return code;
                }
                finally
                {
                    fs.Close();
                    writer.Close();
                }
            }
        }
    }
}